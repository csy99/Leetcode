/**
 * Created by csy99 on 7/8/21.
 */
class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        UFS ufs = new UFS(n);
        for (int i = 0; i < n; i++) {
            for (int j = i+1; j < n; j++) {
                if (graph[i][j] == 1)
                    ufs.union(i, j);
            }
        }
        Arrays.sort(initial);
        for (int init: initial) {
            int head = ufs.find(init);
            ufs.infected[head]++;
        }
        
        int size = 0;
        int idx = -1;
        for (int init: initial) {
            int head = ufs.find(init);
            if (ufs.infected[head] == 1) {
                if (size < ufs.size[head]) {
                    size = ufs.size[head];
                    idx = init;
                }
            }
        }
        return idx == -1 ? initial[0] : idx;
    }
}

class UFS {
    int[] parent;
    int[] size;
    int[] infected;
    
    UFS(int n) {
        parent = new int[n];
        size = new int[n];
        infected = new int[n];
        for (int i = 0; i < n; i++) {
            parent[i] = i;
            size[i] = 1;
        }
    }
    
    int find(int u) {
        while (u != parent[u]) {
            parent[u] = parent[parent[u]];
            u = parent[u];
        }
        return u;
    }
    
    boolean union(int u, int v) {
        int ru = find(u);
        int rv = find(v);
        if (ru == rv) return false;
        parent[rv] = ru;
        size[ru] += size[rv];
        return true;
    }
    
}
